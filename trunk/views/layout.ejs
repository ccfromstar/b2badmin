<!--HTML5 doctype-->
<!DOCTYPE html>
<html lang="zh-CN">
  <!-- 强烈建议为 html 根元素指定 lang 属性，从而为文档设置正确的语言。这将有助于语音合成工具确定其所应该采用的发音，有助于翻译工具确定其翻译时所应遵守的规则等等。-->
  <head>
    <title>荟邮智慧云</title>
    <!-- IE 支持通过特定的 <meta> 标签来确定绘制当前页面所应该采用的 IE 版本。除非有强烈的特殊需求，否则最好是设置为 edge mode，从而通知 IE 采用其所支持的最新的模式。-->
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <!-- 通过明确声明字符编码，能够确保浏览器快速并容易的判断页面内容的渲染方式。这样做的好处是，可以避免在 HTML 中使用字符实体标记（character entity），从而全部与文档编码一致（一般采用 UTF-8 编码）。-->
    <meta charset="UTF-8">
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
    
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/bootstrap/dist/css/bootstrap.min.css">
    <style>
    *{
        margin:0;
        padding:0;
        font-size:12px;
        font-family:宋体;
        color: #797979;
    }
    </style>

    <!-- 可选: 包含 jQuery 库 -->
    <script src="/js/jquery.min.js"></script>
    <script src="/js/ejs_production.js"></script>
    <script src="/js/cookiesoperator.js"></script>
    <script src="/js/Highcharts-4.0.3/js/highcharts.js"></script>
    <script src="/js/My97DatePicker/WdatePicker.js"></script>
  </head>

  <body>
    <div class="container" style="margin-left:10px;width:99%;">
        <table style="width:100%">
          <tr>
            <td style="padding-top:10px;padding-bottom:10px"><span style="font-size:22px"><img src="/images/logo4.png" style="height:35px;margin-top:-5px;" />《荟邮智慧云》管理系统</span></td>
            <td style="text-align:right">
              <span style="margin-left:10px;">当前用户：</span><span id="userName" ></span>
        <div class="btn-group" style="margin-right:90px;margin-left:10px">
          <button type="button" class="btn btn-default btn-xs dropdown-toggle" 
          data-toggle="dropdown">
          <span class="glyphicon glyphicon-cog" style="margin-right:5px"></span>功能<span class="caret"></span>
          </button>
        <ul class="dropdown-menu" role="menu">
          <!--<li><a href="/updatelog"><span class="glyphicon glyphicon-book" style="margin-right:5px"></span>更新日志</a></li>-->
          <li><a href="/"><span class="glyphicon glyphicon-home" style="margin-right:5px"></span>返回首页</a></li>
          <li><a href="/cmbpay"><span class="glyphicon glyphicon-phone" style="margin-right:5px"></span>招行支付</a></li>
          <li class="divider"></li>
          <li><a href="#" onclick="logout()"><span class="glyphicon glyphicon-log-out" style="margin-right:5px"></span>退出</a></li>
        </ul>
        </div>
            </td>
          </tr>
        </table>
    </div>
    <div class="container" style="margin-left:10px;width:99%">
      <div class="row">
        <div class="col-md-2">
          <!--左侧导航栏-->
          <%-include navigation.ejs%>
        </div>
        <div class="col-md-10" style="margin-top:10px;">
              <!--视图搜索栏-->
              <%-include search.ejs%>
              <div id="viewtable"><span class='glyphicon glyphicon-refresh' style='margin-right:5px'></span>数据加载中</div>
          <!--通用显示框-->
          <%-include commonwindow.ejs%>
          <%- body %>
        </div>
      </div>
    </div>
    
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->

    <!--登陆框-->
    <%-include login.ejs%>

     <!--消息框-->
    <%-include message.ejs%>  

    <!-- JavaScript 放置在文档最后面可以使页面加载速度更快 -->
    
    <!-- 可选: 合并了 Bootstrap JavaScript 插件 -->
    <script src="/bootstrap/dist/js/bootstrap.min.js"></script>
    <!--通用JS-->
    <%-include commonjs.ejs%>
  </body>
</html>
